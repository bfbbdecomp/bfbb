.include "macros.inc"
.file "GXMisc.c"

# 0x801CBAB0 - 0x801CC198
.text
.balign 4

.fn GXSetMisc, global
/* 801CBAB0 001C8B90  2C 03 00 02 */	cmpwi r3, 0x2
/* 801CBAB4 001C8B94  41 82 00 60 */	beq .L_801CBB14
/* 801CBAB8 001C8B98  40 80 00 14 */	bge .L_801CBACC
/* 801CBABC 001C8B9C  2C 03 00 00 */	cmpwi r3, 0x0
/* 801CBAC0 001C8BA0  4D 82 00 20 */	beqlr
/* 801CBAC4 001C8BA4  40 80 00 14 */	bge .L_801CBAD8
/* 801CBAC8 001C8BA8  4E 80 00 20 */	blr
.L_801CBACC:
/* 801CBACC 001C8BAC  2C 03 00 04 */	cmpwi r3, 0x4
/* 801CBAD0 001C8BB0  4C 80 00 20 */	bgelr
/* 801CBAD4 001C8BB4  48 00 00 58 */	b .L_801CBB2C
.L_801CBAD8:
/* 801CBAD8 001C8BB8  80 A2 B2 F8 */	lwz r5, __GXData@sda21(r2)
/* 801CBADC 001C8BBC  38 00 00 01 */	li r0, 0x1
/* 801CBAE0 001C8BC0  B0 85 00 04 */	sth r4, 0x4(r5)
/* 801CBAE4 001C8BC4  A0 65 00 04 */	lhz r3, 0x4(r5)
/* 801CBAE8 001C8BC8  7C 63 00 34 */	cntlzw r3, r3
/* 801CBAEC 001C8BCC  54 63 DC 3E */	extrwi r3, r3, 16, 11
/* 801CBAF0 001C8BD0  B0 65 00 00 */	sth r3, 0x0(r5)
/* 801CBAF4 001C8BD4  B0 05 00 02 */	sth r0, 0x2(r5)
/* 801CBAF8 001C8BD8  A0 05 00 04 */	lhz r0, 0x4(r5)
/* 801CBAFC 001C8BDC  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBB00 001C8BE0  4D 82 00 20 */	beqlr
/* 801CBB04 001C8BE4  80 05 05 AC */	lwz r0, 0x5ac(r5)
/* 801CBB08 001C8BE8  60 00 00 08 */	ori r0, r0, 0x8
/* 801CBB0C 001C8BEC  90 05 05 AC */	stw r0, 0x5ac(r5)
/* 801CBB10 001C8BF0  4E 80 00 20 */	blr
.L_801CBB14:
/* 801CBB14 001C8BF4  7C 84 00 D0 */	neg r4, r4
/* 801CBB18 001C8BF8  80 62 B2 F8 */	lwz r3, __GXData@sda21(r2)
/* 801CBB1C 001C8BFC  30 04 FF FF */	addic r0, r4, -0x1
/* 801CBB20 001C8C00  7C 00 21 10 */	subfe r0, r0, r4
/* 801CBB24 001C8C04  98 03 05 A9 */	stb r0, 0x5a9(r3)
/* 801CBB28 001C8C08  4E 80 00 20 */	blr
.L_801CBB2C:
/* 801CBB2C 001C8C0C  7C 84 00 D0 */	neg r4, r4
/* 801CBB30 001C8C10  80 62 B2 F8 */	lwz r3, __GXData@sda21(r2)
/* 801CBB34 001C8C14  30 04 FF FF */	addic r0, r4, -0x1
/* 801CBB38 001C8C18  7C 00 21 10 */	subfe r0, r0, r4
/* 801CBB3C 001C8C1C  98 03 05 AA */	stb r0, 0x5aa(r3)
/* 801CBB40 001C8C20  4E 80 00 20 */	blr
.endfn GXSetMisc

.fn GXFlush, global
/* 801CBB44 001C8C24  7C 08 02 A6 */	mflr r0
/* 801CBB48 001C8C28  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBB4C 001C8C2C  94 21 FF F8 */	stwu r1, -0x8(r1)
/* 801CBB50 001C8C30  80 62 B2 F8 */	lwz r3, __GXData@sda21(r2)
/* 801CBB54 001C8C34  80 03 05 AC */	lwz r0, 0x5ac(r3)
/* 801CBB58 001C8C38  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBB5C 001C8C3C  41 82 00 08 */	beq .L_801CBB64
/* 801CBB60 001C8C40  48 00 06 39 */	bl __GXSetDirtyState
.L_801CBB64:
/* 801CBB64 001C8C44  38 00 00 00 */	li r0, 0x0
/* 801CBB68 001C8C48  3C 60 CC 01 */	lis r3, 0xcc01
/* 801CBB6C 001C8C4C  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB70 001C8C50  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB74 001C8C54  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB78 001C8C58  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB7C 001C8C5C  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB80 001C8C60  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB84 001C8C64  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB88 001C8C68  90 03 80 00 */	stw r0, -0x8000(r3)
/* 801CBB8C 001C8C6C  4B FE F1 1D */	bl PPCSync
/* 801CBB90 001C8C70  80 01 00 0C */	lwz r0, 0xc(r1)
/* 801CBB94 001C8C74  38 21 00 08 */	addi r1, r1, 0x8
/* 801CBB98 001C8C78  7C 08 03 A6 */	mtlr r0
/* 801CBB9C 001C8C7C  4E 80 00 20 */	blr
.endfn GXFlush

.fn __GXAbort, global
/* 801CBBA0 001C8C80  7C 08 02 A6 */	mflr r0
/* 801CBBA4 001C8C84  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBBA8 001C8C88  94 21 FF D8 */	stwu r1, -0x28(r1)
/* 801CBBAC 001C8C8C  BF 61 00 14 */	stmw r27, 0x14(r1)
/* 801CBBB0 001C8C90  80 62 B2 F8 */	lwz r3, __GXData@sda21(r2)
/* 801CBBB4 001C8C94  88 03 05 AA */	lbz r0, 0x5aa(r3)
/* 801CBBB8 001C8C98  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBBBC 001C8C9C  41 82 00 B0 */	beq .L_801CBC6C
/* 801CBBC0 001C8CA0  4B FF F1 95 */	bl GXGetGPFifo
/* 801CBBC4 001C8CA4  28 03 00 00 */	cmplwi r3, 0x0
/* 801CBBC8 001C8CA8  41 82 00 A4 */	beq .L_801CBC6C
/* 801CBBCC 001C8CAC  80 6D 9B AC */	lwz r3, __memReg@sda21(r13)
/* 801CBBD0 001C8CB0  38 C3 00 4E */	addi r6, r3, 0x4e
/* 801CBBD4 001C8CB4  A0 83 00 4E */	lhz r4, 0x4e(r3)
/* 801CBBD8 001C8CB8  38 A3 00 50 */	addi r5, r3, 0x50
.L_801CBBDC:
/* 801CBBDC 001C8CBC  7C 80 23 78 */	mr r0, r4
/* 801CBBE0 001C8CC0  A0 86 00 00 */	lhz r4, 0x0(r6)
/* 801CBBE4 001C8CC4  A0 65 00 00 */	lhz r3, 0x0(r5)
/* 801CBBE8 001C8CC8  7C 04 00 40 */	cmplw r4, r0
/* 801CBBEC 001C8CCC  40 82 FF F0 */	bne .L_801CBBDC
/* 801CBBF0 001C8CD0  54 80 80 1E */	slwi r0, r4, 16
/* 801CBBF4 001C8CD4  7C 1B 1B 78 */	or r27, r0, r3
.L_801CBBF8:
/* 801CBBF8 001C8CD8  48 00 B9 55 */	bl OSGetTime
/* 801CBBFC 001C8CDC  38 00 00 00 */	li r0, 0x0
/* 801CBC00 001C8CE0  3B E4 00 00 */	addi r31, r4, 0x0
/* 801CBC04 001C8CE4  3B C3 00 00 */	addi r30, r3, 0x0
/* 801CBC08 001C8CE8  6C 1C 80 00 */	xoris r28, r0, 0x8000
/* 801CBC0C 001C8CEC  3B A0 00 08 */	li r29, 0x8
.L_801CBC10:
/* 801CBC10 001C8CF0  48 00 B9 3D */	bl OSGetTime
/* 801CBC14 001C8CF4  7C 9F 20 10 */	subfc r4, r31, r4
/* 801CBC18 001C8CF8  7C 1E 19 10 */	subfe r0, r30, r3
/* 801CBC1C 001C8CFC  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 801CBC20 001C8D00  7C 04 E8 10 */	subfc r0, r4, r29
/* 801CBC24 001C8D04  7C 63 E1 10 */	subfe r3, r3, r28
/* 801CBC28 001C8D08  7C 7C E1 10 */	subfe r3, r28, r28
/* 801CBC2C 001C8D0C  7C 63 00 D1 */	neg. r3, r3
/* 801CBC30 001C8D10  41 82 FF E0 */	beq .L_801CBC10
/* 801CBC34 001C8D14  80 6D 9B AC */	lwz r3, __memReg@sda21(r13)
/* 801CBC38 001C8D18  38 C3 00 4E */	addi r6, r3, 0x4e
/* 801CBC3C 001C8D1C  A0 83 00 4E */	lhz r4, 0x4e(r3)
/* 801CBC40 001C8D20  38 A3 00 50 */	addi r5, r3, 0x50
.L_801CBC44:
/* 801CBC44 001C8D24  7C 80 23 78 */	mr r0, r4
/* 801CBC48 001C8D28  A0 86 00 00 */	lhz r4, 0x0(r6)
/* 801CBC4C 001C8D2C  A0 65 00 00 */	lhz r3, 0x0(r5)
/* 801CBC50 001C8D30  7C 04 00 40 */	cmplw r4, r0
/* 801CBC54 001C8D34  40 82 FF F0 */	bne .L_801CBC44
/* 801CBC58 001C8D38  54 80 80 1E */	slwi r0, r4, 16
/* 801CBC5C 001C8D3C  7C 00 1B 78 */	or r0, r0, r3
/* 801CBC60 001C8D40  7C 00 D8 40 */	cmplw r0, r27
/* 801CBC64 001C8D44  7C 1B 03 78 */	mr r27, r0
/* 801CBC68 001C8D48  40 82 FF 90 */	bne .L_801CBBF8
.L_801CBC6C:
/* 801CBC6C 001C8D4C  3C 60 CC 00 */	lis r3, 0xcc00
/* 801CBC70 001C8D50  38 00 00 01 */	li r0, 0x1
/* 801CBC74 001C8D54  3B 63 30 00 */	addi r27, r3, 0x3000
/* 801CBC78 001C8D58  94 1B 00 18 */	stwu r0, 0x18(r27)
/* 801CBC7C 001C8D5C  48 00 B8 D1 */	bl OSGetTime
/* 801CBC80 001C8D60  38 00 00 00 */	li r0, 0x0
/* 801CBC84 001C8D64  3B E4 00 00 */	addi r31, r4, 0x0
/* 801CBC88 001C8D68  3B C3 00 00 */	addi r30, r3, 0x0
/* 801CBC8C 001C8D6C  6C 1C 80 00 */	xoris r28, r0, 0x8000
/* 801CBC90 001C8D70  3B A0 00 32 */	li r29, 0x32
.L_801CBC94:
/* 801CBC94 001C8D74  48 00 B8 B9 */	bl OSGetTime
/* 801CBC98 001C8D78  7C 9F 20 10 */	subfc r4, r31, r4
/* 801CBC9C 001C8D7C  7C 1E 19 10 */	subfe r0, r30, r3
/* 801CBCA0 001C8D80  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 801CBCA4 001C8D84  7C 04 E8 10 */	subfc r0, r4, r29
/* 801CBCA8 001C8D88  7C 63 E1 10 */	subfe r3, r3, r28
/* 801CBCAC 001C8D8C  7C 7C E1 10 */	subfe r3, r28, r28
/* 801CBCB0 001C8D90  7C 63 00 D1 */	neg. r3, r3
/* 801CBCB4 001C8D94  41 82 FF E0 */	beq .L_801CBC94
/* 801CBCB8 001C8D98  3B C0 00 00 */	li r30, 0x0
/* 801CBCBC 001C8D9C  93 DB 00 00 */	stw r30, 0x0(r27)
/* 801CBCC0 001C8DA0  48 00 B8 8D */	bl OSGetTime
/* 801CBCC4 001C8DA4  3B 84 00 00 */	addi r28, r4, 0x0
/* 801CBCC8 001C8DA8  3B A3 00 00 */	addi r29, r3, 0x0
/* 801CBCCC 001C8DAC  6F DF 80 00 */	xoris r31, r30, 0x8000
/* 801CBCD0 001C8DB0  3B C0 00 05 */	li r30, 0x5
.L_801CBCD4:
/* 801CBCD4 001C8DB4  48 00 B8 79 */	bl OSGetTime
/* 801CBCD8 001C8DB8  7C 9C 20 10 */	subfc r4, r28, r4
/* 801CBCDC 001C8DBC  7C 1D 19 10 */	subfe r0, r29, r3
/* 801CBCE0 001C8DC0  6C 03 80 00 */	xoris r3, r0, 0x8000
/* 801CBCE4 001C8DC4  7C 04 F0 10 */	subfc r0, r4, r30
/* 801CBCE8 001C8DC8  7C 63 F9 10 */	subfe r3, r3, r31
/* 801CBCEC 001C8DCC  7C 7F F9 10 */	subfe r3, r31, r31
/* 801CBCF0 001C8DD0  7C 63 00 D1 */	neg. r3, r3
/* 801CBCF4 001C8DD4  41 82 FF E0 */	beq .L_801CBCD4
/* 801CBCF8 001C8DD8  BB 61 00 14 */	lmw r27, 0x14(r1)
/* 801CBCFC 001C8DDC  80 01 00 2C */	lwz r0, 0x2c(r1)
/* 801CBD00 001C8DE0  38 21 00 28 */	addi r1, r1, 0x28
/* 801CBD04 001C8DE4  7C 08 03 A6 */	mtlr r0
/* 801CBD08 001C8DE8  4E 80 00 20 */	blr
.endfn __GXAbort

.fn GXSetDrawSync, global
/* 801CBD0C 001C8DEC  7C 08 02 A6 */	mflr r0
/* 801CBD10 001C8DF0  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBD14 001C8DF4  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 801CBD18 001C8DF8  93 E1 00 14 */	stw r31, 0x14(r1)
/* 801CBD1C 001C8DFC  93 C1 00 10 */	stw r30, 0x10(r1)
/* 801CBD20 001C8E00  7C 7E 1B 78 */	mr r30, r3
/* 801CBD24 001C8E04  48 00 85 ED */	bl OSDisableInterrupts
/* 801CBD28 001C8E08  38 C0 00 61 */	li r6, 0x61
/* 801CBD2C 001C8E0C  80 82 B2 F8 */	lwz r4, __GXData@sda21(r2)
/* 801CBD30 001C8E10  3C A0 CC 01 */	lis r5, 0xcc01
/* 801CBD34 001C8E14  57 C0 04 3E */	clrlwi r0, r30, 16
/* 801CBD38 001C8E18  98 C5 80 00 */	stb r6, -0x8000(r5)
/* 801CBD3C 001C8E1C  64 07 48 00 */	oris r7, r0, 0x4800
/* 801CBD40 001C8E20  90 E5 80 00 */	stw r7, -0x8000(r5)
/* 801CBD44 001C8E24  53 C7 04 3E */	rlwimi r7, r30, 0, 16, 31
/* 801CBD48 001C8E28  38 00 00 47 */	li r0, 0x47
/* 801CBD4C 001C8E2C  98 C5 80 00 */	stb r6, -0x8000(r5)
/* 801CBD50 001C8E30  50 07 C0 0E */	rlwimi r7, r0, 24, 0, 7
/* 801CBD54 001C8E34  7C 7E 1B 78 */	mr r30, r3
/* 801CBD58 001C8E38  90 E5 80 00 */	stw r7, -0x8000(r5)
/* 801CBD5C 001C8E3C  80 04 05 AC */	lwz r0, 0x5ac(r4)
/* 801CBD60 001C8E40  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBD64 001C8E44  41 82 00 08 */	beq .L_801CBD6C
/* 801CBD68 001C8E48  48 00 04 31 */	bl __GXSetDirtyState
.L_801CBD6C:
/* 801CBD6C 001C8E4C  3B E0 00 00 */	li r31, 0x0
/* 801CBD70 001C8E50  3C 60 CC 01 */	lis r3, 0xcc01
/* 801CBD74 001C8E54  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD78 001C8E58  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD7C 001C8E5C  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD80 001C8E60  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD84 001C8E64  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD88 001C8E68  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD8C 001C8E6C  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD90 001C8E70  93 E3 80 00 */	stw r31, -0x8000(r3)
/* 801CBD94 001C8E74  4B FE EF 15 */	bl PPCSync
/* 801CBD98 001C8E78  7F C3 F3 78 */	mr r3, r30
/* 801CBD9C 001C8E7C  48 00 85 9D */	bl OSRestoreInterrupts
/* 801CBDA0 001C8E80  80 62 B2 F8 */	lwz r3, __GXData@sda21(r2)
/* 801CBDA4 001C8E84  B3 E3 00 02 */	sth r31, 0x2(r3)
/* 801CBDA8 001C8E88  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 801CBDAC 001C8E8C  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 801CBDB0 001C8E90  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 801CBDB4 001C8E94  38 21 00 18 */	addi r1, r1, 0x18
/* 801CBDB8 001C8E98  7C 08 03 A6 */	mtlr r0
/* 801CBDBC 001C8E9C  4E 80 00 20 */	blr
.endfn GXSetDrawSync

.fn GXReadDrawSync, global
/* 801CBDC0 001C8EA0  80 6D 9B A8 */	lwz r3, __peReg@sda21(r13)
/* 801CBDC4 001C8EA4  A0 63 00 0E */	lhz r3, 0xe(r3)
/* 801CBDC8 001C8EA8  4E 80 00 20 */	blr
.endfn GXReadDrawSync

.fn GXDrawDone, global
/* 801CBDCC 001C8EAC  7C 08 02 A6 */	mflr r0
/* 801CBDD0 001C8EB0  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBDD4 001C8EB4  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 801CBDD8 001C8EB8  93 E1 00 14 */	stw r31, 0x14(r1)
/* 801CBDDC 001C8EBC  48 00 85 35 */	bl OSDisableInterrupts
/* 801CBDE0 001C8EC0  38 00 00 61 */	li r0, 0x61
/* 801CBDE4 001C8EC4  3C A0 CC 01 */	lis r5, 0xcc01
/* 801CBDE8 001C8EC8  3C 80 45 00 */	lis r4, 0x4500
/* 801CBDEC 001C8ECC  98 05 80 00 */	stb r0, -0x8000(r5)
/* 801CBDF0 001C8ED0  38 04 00 02 */	addi r0, r4, 0x2
/* 801CBDF4 001C8ED4  90 05 80 00 */	stw r0, -0x8000(r5)
/* 801CBDF8 001C8ED8  7C 7F 1B 78 */	mr r31, r3
/* 801CBDFC 001C8EDC  4B FF FD 49 */	bl GXFlush
/* 801CBE00 001C8EE0  38 00 00 00 */	li r0, 0x0
/* 801CBE04 001C8EE4  98 0D 9B F0 */	stb r0, DrawDone@sda21(r13)
/* 801CBE08 001C8EE8  7F E3 FB 78 */	mr r3, r31
/* 801CBE0C 001C8EEC  48 00 85 2D */	bl OSRestoreInterrupts
/* 801CBE10 001C8EF0  48 00 85 01 */	bl OSDisableInterrupts
/* 801CBE14 001C8EF4  7C 7F 1B 78 */	mr r31, r3
/* 801CBE18 001C8EF8  48 00 00 0C */	b .L_801CBE24
.L_801CBE1C:
/* 801CBE1C 001C8EFC  38 6D 9B F4 */	addi r3, r13, FinishQueue@sda21
/* 801CBE20 001C8F00  48 00 B4 91 */	bl OSSleepThread
.L_801CBE24:
/* 801CBE24 001C8F04  88 0D 9B F0 */	lbz r0, DrawDone@sda21(r13)
/* 801CBE28 001C8F08  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBE2C 001C8F0C  41 82 FF F0 */	beq .L_801CBE1C
/* 801CBE30 001C8F10  7F E3 FB 78 */	mr r3, r31
/* 801CBE34 001C8F14  48 00 85 05 */	bl OSRestoreInterrupts
/* 801CBE38 001C8F18  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 801CBE3C 001C8F1C  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 801CBE40 001C8F20  38 21 00 18 */	addi r1, r1, 0x18
/* 801CBE44 001C8F24  7C 08 03 A6 */	mtlr r0
/* 801CBE48 001C8F28  4E 80 00 20 */	blr
.endfn GXDrawDone

.fn GXPixModeSync, global
/* 801CBE4C 001C8F2C  38 00 00 61 */	li r0, 0x61
/* 801CBE50 001C8F30  80 82 B2 F8 */	lwz r4, __GXData@sda21(r2)
/* 801CBE54 001C8F34  3C A0 CC 01 */	lis r5, 0xcc01
/* 801CBE58 001C8F38  98 05 80 00 */	stb r0, -0x8000(r5)
/* 801CBE5C 001C8F3C  38 00 00 00 */	li r0, 0x0
/* 801CBE60 001C8F40  80 64 01 DC */	lwz r3, 0x1dc(r4)
/* 801CBE64 001C8F44  90 65 80 00 */	stw r3, -0x8000(r5)
/* 801CBE68 001C8F48  B0 04 00 02 */	sth r0, 0x2(r4)
/* 801CBE6C 001C8F4C  4E 80 00 20 */	blr
.endfn GXPixModeSync

.fn GXPokeAlphaMode, global
/* 801CBE70 001C8F50  80 AD 9B A8 */	lwz r5, __peReg@sda21(r13)
/* 801CBE74 001C8F54  54 80 06 3E */	clrlwi r0, r4, 24
/* 801CBE78 001C8F58  50 60 40 2E */	rlwimi r0, r3, 8, 0, 23
/* 801CBE7C 001C8F5C  B0 05 00 06 */	sth r0, 0x6(r5)
/* 801CBE80 001C8F60  4E 80 00 20 */	blr
.endfn GXPokeAlphaMode

.fn GXPokeAlphaRead, global
/* 801CBE84 001C8F64  38 A0 00 00 */	li r5, 0x0
/* 801CBE88 001C8F68  80 8D 9B A8 */	lwz r4, __peReg@sda21(r13)
/* 801CBE8C 001C8F6C  50 65 07 BE */	rlwimi r5, r3, 0, 30, 31
/* 801CBE90 001C8F70  38 00 00 01 */	li r0, 0x1
/* 801CBE94 001C8F74  38 65 00 00 */	addi r3, r5, 0x0
/* 801CBE98 001C8F78  50 03 17 7A */	rlwimi r3, r0, 2, 29, 29
/* 801CBE9C 001C8F7C  B0 64 00 08 */	sth r3, 0x8(r4)
/* 801CBEA0 001C8F80  4E 80 00 20 */	blr
.endfn GXPokeAlphaRead

.fn GXPokeAlphaUpdate, global
/* 801CBEA4 001C8F84  80 8D 9B A8 */	lwz r4, __peReg@sda21(r13)
/* 801CBEA8 001C8F88  54 60 06 3E */	clrlwi r0, r3, 24
/* 801CBEAC 001C8F8C  A0 64 00 02 */	lhz r3, 0x2(r4)
/* 801CBEB0 001C8F90  50 03 26 F6 */	rlwimi r3, r0, 4, 27, 27
/* 801CBEB4 001C8F94  B0 64 00 02 */	sth r3, 0x2(r4)
/* 801CBEB8 001C8F98  4E 80 00 20 */	blr
.endfn GXPokeAlphaUpdate

.fn GXPokeBlendMode, global
/* 801CBEBC 001C8F9C  80 ED 9B A8 */	lwz r7, __peReg@sda21(r13)
/* 801CBEC0 001C8FA0  2C 03 00 01 */	cmpwi r3, 0x1
/* 801CBEC4 001C8FA4  39 20 00 01 */	li r9, 0x1
/* 801CBEC8 001C8FA8  A1 47 00 02 */	lhz r10, 0x2(r7)
/* 801CBECC 001C8FAC  41 82 00 10 */	beq .L_801CBEDC
/* 801CBED0 001C8FB0  2C 03 00 03 */	cmpwi r3, 0x3
/* 801CBED4 001C8FB4  41 82 00 08 */	beq .L_801CBEDC
/* 801CBED8 001C8FB8  39 20 00 00 */	li r9, 0x0
.L_801CBEDC:
/* 801CBEDC 001C8FBC  20 03 00 03 */	subfic r0, r3, 0x3
/* 801CBEE0 001C8FC0  80 ED 9B A8 */	lwz r7, __peReg@sda21(r13)
/* 801CBEE4 001C8FC4  7C 08 00 34 */	cntlzw r8, r0
/* 801CBEE8 001C8FC8  20 03 00 02 */	subfic r0, r3, 0x2
/* 801CBEEC 001C8FCC  51 2A 07 FE */	rlwimi r10, r9, 0, 31, 31
/* 801CBEF0 001C8FD0  55 03 D9 7E */	srwi r3, r8, 5
/* 801CBEF4 001C8FD4  39 0A 00 00 */	addi r8, r10, 0x0
/* 801CBEF8 001C8FD8  7C 00 00 34 */	cntlzw r0, r0
/* 801CBEFC 001C8FDC  50 68 5D 28 */	rlwimi r8, r3, 11, 20, 20
/* 801CBF00 001C8FE0  50 08 E7 BC */	rlwimi r8, r0, 28, 30, 30
/* 801CBF04 001C8FE4  50 C8 64 26 */	rlwimi r8, r6, 12, 16, 19
/* 801CBF08 001C8FE8  50 88 45 6E */	rlwimi r8, r4, 8, 21, 23
/* 801CBF0C 001C8FEC  38 00 00 41 */	li r0, 0x41
/* 801CBF10 001C8FF0  50 A8 2E 34 */	rlwimi r8, r5, 5, 24, 26
/* 801CBF14 001C8FF4  50 08 C0 0E */	rlwimi r8, r0, 24, 0, 7
/* 801CBF18 001C8FF8  B1 07 00 02 */	sth r8, 0x2(r7)
/* 801CBF1C 001C8FFC  4E 80 00 20 */	blr
.endfn GXPokeBlendMode

.fn GXPokeColorUpdate, global
/* 801CBF20 001C9000  80 8D 9B A8 */	lwz r4, __peReg@sda21(r13)
/* 801CBF24 001C9004  54 60 06 3E */	clrlwi r0, r3, 24
/* 801CBF28 001C9008  A0 64 00 02 */	lhz r3, 0x2(r4)
/* 801CBF2C 001C900C  50 03 1F 38 */	rlwimi r3, r0, 3, 28, 28
/* 801CBF30 001C9010  B0 64 00 02 */	sth r3, 0x2(r4)
/* 801CBF34 001C9014  4E 80 00 20 */	blr
.endfn GXPokeColorUpdate

.fn GXPokeDstAlpha, global
/* 801CBF38 001C9018  54 80 06 3E */	clrlwi r0, r4, 24
/* 801CBF3C 001C901C  80 8D 9B A8 */	lwz r4, __peReg@sda21(r13)
/* 801CBF40 001C9020  38 A0 00 00 */	li r5, 0x0
/* 801CBF44 001C9024  50 05 06 3E */	rlwimi r5, r0, 0, 24, 31
/* 801CBF48 001C9028  54 60 06 3E */	clrlwi r0, r3, 24
/* 801CBF4C 001C902C  38 65 00 00 */	addi r3, r5, 0x0
/* 801CBF50 001C9030  50 03 45 EE */	rlwimi r3, r0, 8, 23, 23
/* 801CBF54 001C9034  B0 64 00 04 */	sth r3, 0x4(r4)
/* 801CBF58 001C9038  4E 80 00 20 */	blr
.endfn GXPokeDstAlpha

.fn GXPokeDither, global
/* 801CBF5C 001C903C  80 8D 9B A8 */	lwz r4, __peReg@sda21(r13)
/* 801CBF60 001C9040  54 60 06 3E */	clrlwi r0, r3, 24
/* 801CBF64 001C9044  A0 64 00 02 */	lhz r3, 0x2(r4)
/* 801CBF68 001C9048  50 03 17 7A */	rlwimi r3, r0, 2, 29, 29
/* 801CBF6C 001C904C  B0 64 00 02 */	sth r3, 0x2(r4)
/* 801CBF70 001C9050  4E 80 00 20 */	blr
.endfn GXPokeDither

.fn GXPokeZMode, global
/* 801CBF74 001C9054  54 60 06 3E */	clrlwi r0, r3, 24
/* 801CBF78 001C9058  80 6D 9B A8 */	lwz r3, __peReg@sda21(r13)
/* 801CBF7C 001C905C  38 C0 00 00 */	li r6, 0x0
/* 801CBF80 001C9060  50 06 07 FE */	rlwimi r6, r0, 0, 31, 31
/* 801CBF84 001C9064  50 86 0F 3C */	rlwimi r6, r4, 1, 28, 30
/* 801CBF88 001C9068  50 A6 26 F6 */	rlwimi r6, r5, 4, 27, 27
/* 801CBF8C 001C906C  B0 C3 00 00 */	sth r6, 0x0(r3)
/* 801CBF90 001C9070  4E 80 00 20 */	blr
.endfn GXPokeZMode

.fn GXSetDrawSyncCallback, global
/* 801CBF94 001C9074  7C 08 02 A6 */	mflr r0
/* 801CBF98 001C9078  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBF9C 001C907C  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 801CBFA0 001C9080  93 E1 00 14 */	stw r31, 0x14(r1)
/* 801CBFA4 001C9084  93 C1 00 10 */	stw r30, 0x10(r1)
/* 801CBFA8 001C9088  7C 7E 1B 78 */	mr r30, r3
/* 801CBFAC 001C908C  83 ED 9B E8 */	lwz r31, TokenCB@sda21(r13)
/* 801CBFB0 001C9090  48 00 83 61 */	bl OSDisableInterrupts
/* 801CBFB4 001C9094  93 CD 9B E8 */	stw r30, TokenCB@sda21(r13)
/* 801CBFB8 001C9098  48 00 83 81 */	bl OSRestoreInterrupts
/* 801CBFBC 001C909C  7F E3 FB 78 */	mr r3, r31
/* 801CBFC0 001C90A0  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 801CBFC4 001C90A4  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 801CBFC8 001C90A8  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 801CBFCC 001C90AC  38 21 00 18 */	addi r1, r1, 0x18
/* 801CBFD0 001C90B0  7C 08 03 A6 */	mtlr r0
/* 801CBFD4 001C90B4  4E 80 00 20 */	blr
.endfn GXSetDrawSyncCallback

.fn GXTokenInterruptHandler, local
/* 801CBFD8 001C90B8  7C 08 02 A6 */	mflr r0
/* 801CBFDC 001C90BC  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CBFE0 001C90C0  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 801CBFE4 001C90C4  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 801CBFE8 001C90C8  93 C1 02 D8 */	stw r30, 0x2d8(r1)
/* 801CBFEC 001C90CC  7C 9E 23 78 */	mr r30, r4
/* 801CBFF0 001C90D0  80 0D 9B E8 */	lwz r0, TokenCB@sda21(r13)
/* 801CBFF4 001C90D4  80 6D 9B A8 */	lwz r3, __peReg@sda21(r13)
/* 801CBFF8 001C90D8  28 00 00 00 */	cmplwi r0, 0x0
/* 801CBFFC 001C90DC  A3 E3 00 0E */	lhz r31, 0xe(r3)
/* 801CC000 001C90E0  41 82 00 34 */	beq .L_801CC034
/* 801CC004 001C90E4  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC008 001C90E8  48 00 6B 65 */	bl OSClearContext
/* 801CC00C 001C90EC  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC010 001C90F0  48 00 69 95 */	bl OSSetCurrentContext
/* 801CC014 001C90F4  81 8D 9B E8 */	lwz r12, TokenCB@sda21(r13)
/* 801CC018 001C90F8  38 7F 00 00 */	addi r3, r31, 0x0
/* 801CC01C 001C90FC  7D 88 03 A6 */	mtlr r12
/* 801CC020 001C9100  4E 80 00 21 */	blrl
/* 801CC024 001C9104  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC028 001C9108  48 00 6B 45 */	bl OSClearContext
/* 801CC02C 001C910C  7F C3 F3 78 */	mr r3, r30
/* 801CC030 001C9110  48 00 69 75 */	bl OSSetCurrentContext
.L_801CC034:
/* 801CC034 001C9114  80 6D 9B A8 */	lwz r3, __peReg@sda21(r13)
/* 801CC038 001C9118  38 00 00 01 */	li r0, 0x1
/* 801CC03C 001C911C  A0 83 00 0A */	lhz r4, 0xa(r3)
/* 801CC040 001C9120  50 04 17 7A */	rlwimi r4, r0, 2, 29, 29
/* 801CC044 001C9124  B0 83 00 0A */	sth r4, 0xa(r3)
/* 801CC048 001C9128  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 801CC04C 001C912C  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 801CC050 001C9130  83 C1 02 D8 */	lwz r30, 0x2d8(r1)
/* 801CC054 001C9134  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 801CC058 001C9138  7C 08 03 A6 */	mtlr r0
/* 801CC05C 001C913C  4E 80 00 20 */	blr
.endfn GXTokenInterruptHandler

.fn GXSetDrawDoneCallback, global
/* 801CC060 001C9140  7C 08 02 A6 */	mflr r0
/* 801CC064 001C9144  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CC068 001C9148  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 801CC06C 001C914C  93 E1 00 14 */	stw r31, 0x14(r1)
/* 801CC070 001C9150  93 C1 00 10 */	stw r30, 0x10(r1)
/* 801CC074 001C9154  7C 7E 1B 78 */	mr r30, r3
/* 801CC078 001C9158  83 ED 9B EC */	lwz r31, DrawDoneCB@sda21(r13)
/* 801CC07C 001C915C  48 00 82 95 */	bl OSDisableInterrupts
/* 801CC080 001C9160  93 CD 9B EC */	stw r30, DrawDoneCB@sda21(r13)
/* 801CC084 001C9164  48 00 82 B5 */	bl OSRestoreInterrupts
/* 801CC088 001C9168  7F E3 FB 78 */	mr r3, r31
/* 801CC08C 001C916C  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 801CC090 001C9170  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 801CC094 001C9174  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 801CC098 001C9178  38 21 00 18 */	addi r1, r1, 0x18
/* 801CC09C 001C917C  7C 08 03 A6 */	mtlr r0
/* 801CC0A0 001C9180  4E 80 00 20 */	blr
.endfn GXSetDrawDoneCallback

.fn GXFinishInterruptHandler, local
/* 801CC0A4 001C9184  7C 08 02 A6 */	mflr r0
/* 801CC0A8 001C9188  38 60 00 01 */	li r3, 0x1
/* 801CC0AC 001C918C  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CC0B0 001C9190  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 801CC0B4 001C9194  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 801CC0B8 001C9198  3B E4 00 00 */	addi r31, r4, 0x0
/* 801CC0BC 001C919C  80 AD 9B A8 */	lwz r5, __peReg@sda21(r13)
/* 801CC0C0 001C91A0  A0 05 00 0A */	lhz r0, 0xa(r5)
/* 801CC0C4 001C91A4  50 60 1F 38 */	rlwimi r0, r3, 3, 28, 28
/* 801CC0C8 001C91A8  B0 05 00 0A */	sth r0, 0xa(r5)
/* 801CC0CC 001C91AC  80 0D 9B EC */	lwz r0, DrawDoneCB@sda21(r13)
/* 801CC0D0 001C91B0  98 6D 9B F0 */	stb r3, DrawDone@sda21(r13)
/* 801CC0D4 001C91B4  28 00 00 00 */	cmplwi r0, 0x0
/* 801CC0D8 001C91B8  41 82 00 30 */	beq .L_801CC108
/* 801CC0DC 001C91BC  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC0E0 001C91C0  48 00 6A 8D */	bl OSClearContext
/* 801CC0E4 001C91C4  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC0E8 001C91C8  48 00 68 BD */	bl OSSetCurrentContext
/* 801CC0EC 001C91CC  81 8D 9B EC */	lwz r12, DrawDoneCB@sda21(r13)
/* 801CC0F0 001C91D0  7D 88 03 A6 */	mtlr r12
/* 801CC0F4 001C91D4  4E 80 00 21 */	blrl
/* 801CC0F8 001C91D8  38 61 00 10 */	addi r3, r1, 0x10
/* 801CC0FC 001C91DC  48 00 6A 71 */	bl OSClearContext
/* 801CC100 001C91E0  7F E3 FB 78 */	mr r3, r31
/* 801CC104 001C91E4  48 00 68 A1 */	bl OSSetCurrentContext
.L_801CC108:
/* 801CC108 001C91E8  38 6D 9B F4 */	addi r3, r13, FinishQueue@sda21
/* 801CC10C 001C91EC  48 00 B2 91 */	bl OSWakeupThread
/* 801CC110 001C91F0  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 801CC114 001C91F4  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 801CC118 001C91F8  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 801CC11C 001C91FC  7C 08 03 A6 */	mtlr r0
/* 801CC120 001C9200  4E 80 00 20 */	blr
.endfn GXFinishInterruptHandler

.fn __GXPEInit, global
/* 801CC124 001C9204  7C 08 02 A6 */	mflr r0
/* 801CC128 001C9208  3C 60 80 1D */	lis r3, GXTokenInterruptHandler@ha
/* 801CC12C 001C920C  90 01 00 04 */	stw r0, 0x4(r1)
/* 801CC130 001C9210  38 83 BF D8 */	addi r4, r3, GXTokenInterruptHandler@l
/* 801CC134 001C9214  38 60 00 12 */	li r3, 0x12
/* 801CC138 001C9218  94 21 FF F8 */	stwu r1, -0x8(r1)
/* 801CC13C 001C921C  48 00 82 21 */	bl __OSSetInterruptHandler
/* 801CC140 001C9220  3C 60 80 1D */	lis r3, GXFinishInterruptHandler@ha
/* 801CC144 001C9224  38 83 C0 A4 */	addi r4, r3, GXFinishInterruptHandler@l
/* 801CC148 001C9228  38 60 00 13 */	li r3, 0x13
/* 801CC14C 001C922C  48 00 82 11 */	bl __OSSetInterruptHandler
/* 801CC150 001C9230  38 6D 9B F4 */	addi r3, r13, FinishQueue@sda21
/* 801CC154 001C9234  48 00 A6 15 */	bl OSInitThreadQueue
/* 801CC158 001C9238  38 60 20 00 */	li r3, 0x2000
/* 801CC15C 001C923C  48 00 86 05 */	bl __OSUnmaskInterrupts
/* 801CC160 001C9240  38 60 10 00 */	li r3, 0x1000
/* 801CC164 001C9244  48 00 85 FD */	bl __OSUnmaskInterrupts
/* 801CC168 001C9248  80 6D 9B A8 */	lwz r3, __peReg@sda21(r13)
/* 801CC16C 001C924C  38 00 00 01 */	li r0, 0x1
/* 801CC170 001C9250  A0 83 00 0A */	lhz r4, 0xa(r3)
/* 801CC174 001C9254  50 04 17 7A */	rlwimi r4, r0, 2, 29, 29
/* 801CC178 001C9258  50 04 1F 38 */	rlwimi r4, r0, 3, 28, 28
/* 801CC17C 001C925C  50 04 07 FE */	rlwimi r4, r0, 0, 31, 31
/* 801CC180 001C9260  50 04 0F BC */	rlwimi r4, r0, 1, 30, 30
/* 801CC184 001C9264  B0 83 00 0A */	sth r4, 0xa(r3)
/* 801CC188 001C9268  80 01 00 0C */	lwz r0, 0xc(r1)
/* 801CC18C 001C926C  38 21 00 08 */	addi r1, r1, 0x8
/* 801CC190 001C9270  7C 08 03 A6 */	mtlr r0
/* 801CC194 001C9274  4E 80 00 20 */	blr
.endfn __GXPEInit

# 0x803CC4E8 - 0x803CC500
.section .sbss, "wa", @nobits
.balign 8

.obj TokenCB, local
	.skip 0x4
.endobj TokenCB

.obj DrawDoneCB, local
	.skip 0x4
.endobj DrawDoneCB

.obj DrawDone, local
	.skip 0x1
.endobj DrawDone
	.skip 0x3

.obj FinishQueue, local
	.skip 0x8
.endobj FinishQueue
	.skip 0x4
